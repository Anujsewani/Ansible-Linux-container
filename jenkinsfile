def final_image="sewani/ansible_linux"
def tag= "latest"
def network_name="ansiblelinuxcontainer_net"
pipeline{
	agent any
	environment{
		Dockerhub_Credentials=credentials("Docker")
		}
	stages{
		stage('Clone Repository') {
            		steps {
                		script {
					sh"git remote -v"
					sh "git remote show origin"
					sh "git remote set-url origin https://github.com/Anujsewani/Ansible-Linux-container.git"
                    			checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/Anujsewani/Ansible-Linux-container.git', credentialsId: 'Github']]])
               				 }
           			 }
       			 }
		stage("docker build"){
			steps{
				script{
					//sh"docker build -t  ${final_image}:${tag} -f Dockerfile ."
					
					sh"docker-compose up -d "
					}
				}
			}
		stage("docker login"){
			steps{
				script{
					sh "echo $Dockerhub_Credentials_PSW | docker login -u $Dockerhub_Credentials_USR --password-stdin"
					}
				}
			}
		stage("docker push"){
			steps{
				script{
					sh "docker push ${final_image}:${tag}"
					}
				}
			}
		stage("create network"){
                        steps{
                                script{
					echo "hi"
					sh "docker network ls"
					sh "docker network  inspect ${network_name}"
                                        }                                       
                                }
                        }

		stage("docker container1 launch"){
			steps{
				script{
					//sh "docker run -itd --network ${network_name} --name container1 ${final_image}:${tag}"
					//sh "docker start ansible-server-container"
					echo "container 1 started"
					}
				}
			}
		stage("launch 2nd container"){
                        steps{
                                script{
                                        
					sh"docker start ansible-node-container"
                                        }
                                }
                        }

		stage("setup ansible hosts"){
			steps{
				script{
					sh "docker cp ansible/hosts ansible-server-container:/etc/ansible/hosts"
					sh "docker cp ansible/playbook.yml ansible-server-container:/etc/ansible/"
					sh "docker cp ansible/ansible.cfg ansible-server-container:/etc/ansible/"
					sh "docker exec ansible-server-container ansible-playbook /etc/ansible/playbook.yml -i /etc/ansible/hosts"
					}
				}
			}
		stage("cleanup"){
			steps{
				script{
					sh"docker stop ansible-server-container ansible-node-container"
					sh"docker rm ansible-server-container ansible-node-container"
					sh"docker network rm ${network_name}"
					}
				}
			}
		}
	}
	

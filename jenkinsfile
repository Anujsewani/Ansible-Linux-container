def image="ansible_linux"
def final_image="sewani/ansible_linux"
def tag= "latest"
def network_name="mynetwork"
pipeline{
	agent any
	environment{
		Dockerhub_Credentials=credentials("Docker")
		}
	stages{
		stage("docker build"){
			steps{
				script{
					sh"docker build -t  ${final_image}:${tag} -f Dockerfile ."
					}
				}
			}
		stage("docker login"){
			steps{
				script{
					sh "echo $Dockerhub_Credentials_PSW | docker login -u $Dockerhub_Credentials_USR --password-stdin"
					}
				}
			}
		stage("docker push"){
			steps{
				script{
					sh "docker push ${final_image}:${tag}"
					}
				}
			}
		stage("create network"){
                        steps{
                                script{
                                        sh "docker network create ${network_name} --subnet='172.168.100.1/24'"
                                        }
                                }
                        }

		stage("docker container1 launch"){
			steps{
				script{
					sh "docker run -itd --network ${network_name} --name container1 ${final_image}:${tag}"
					}
				}
			}
		stage("launch 2nd container"){
                        steps{
                                script{
                                        sh "docker run -itd --network=${network_name} --ip='172.168.100.3' --name container2  ${final_image}:${tag}"
                                        }
                                }
                        }

		stage("setup ansible hosts"){
			steps{
				script{
					sh "docker cp ansible/hosts container1:/etc/ansible/hosts"
					sh "docker cp ansible/playbook.yml container1:/etc/ansible/"
					sh "docker cp ansible/ansible.cfg container1:/etc/ansible/"
					sh " docker exec container1 ansible-playbook /etc/ansible/playbook.yml -i /etc/ansible/hosts"
					}
				}
			}
		stage("cleanup"){
			steps{
				script{
					sh"docker stop container1 container2"
					sh"docker rm container1 container2"
					sh"docker network rm ${network_name}"
		}
	}
	
